// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum BillStatus {
  PENDING
  PAID
  OVERDUE
}

model User {
  id            String   @id @default(cuid())
  fullName      String
  jobRole       String
  email         String   @unique
  contactNumber String
  username      String   @unique
  password      String
  accountType   String   // "user" or "admin"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  transactions  Transaction[]
}

model Product {
  id          String     @id @default(cuid())
  code        String     @unique
  name        String
  category    String
  supplier    String
  stocks      Int      @default(0)
  unitPrice   Float
  totalPrice  Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  saleItems   SaleItem[]
}

model Sale {
  id            String     @id @default(cuid())
  invoiceNumber String     @unique
  customerName  String
  totalAmount   Float
  paymentMethod String
  status        String     // "pending", "completed", "cancelled"
  items         SaleItem[]
  transaction   Transaction?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model SaleItem {
  id        String   @id @default(cuid())
  saleId    String
  productId String
  quantity  Int
  unitPrice Float
  subtotal  Float
  sale      Sale     @relation(fields: [saleId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          String   @id @default(cuid())
  type        String   // "sale", "purchase", "expense", "income"
  amount      Float
  description String
  status      String   // "pending", "completed", "failed"
  saleId      String?  @unique
  sale        Sale?    @relation(fields: [saleId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bill {
  id          String     @id @default(cuid())
  number      String     @unique
  type        String     // "utility", "supplier", "rent", "other"
  amount      Float
  dueDate     DateTime
  status      BillStatus @default(PENDING)
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Settings {
  id           String   @id @default("1")
  companyName  String
  address      String
  phone        String
  email        String
  currency     String
  taxRate      Float
  timezone     String
  dateFormat   String
  theme        String
  language     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
